{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","data","onAddedComment","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","useEffect","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","addedCommentHandler","useCallback","length","onClick","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.0f909335.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__xY6nT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__vhivb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3n545\",\"loading\":\"NewCommentForm_loading__1MRs2\",\"control\":\"NewCommentForm_control__zEDwO\",\"actions\":\"NewCommentForm_actions__3yWPT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2ogX2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__13-bp\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect, useRef } from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    sendRequest({commentData: { text: enteredText }, quoteId: props.quoteId});\n  };\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (<div className='centered'><LoadingSpinner /></div>)}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === 'completed' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className='centered'>No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;","import { Fragment, useEffect } from 'react';\r\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\r\n\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport Comments from '../components/comments/Comments';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(\r\n    getSingleQuote,\r\n    true\r\n  );\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className='centered'>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className='centered'>{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className='centered'>\r\n          <Link className='btn--flat' to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}