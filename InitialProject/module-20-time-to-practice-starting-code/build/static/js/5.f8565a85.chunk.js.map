{"version":3,"sources":["components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.js","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.js"],"names":["module","exports","NoQuotesFound","className","classes","noquotes","to","QuoteItem","props","console","log","item","text","author","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","DUMMY_QUOTES","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,kC,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,iFCa5CC,EAXO,WACpB,OACE,sBAAKC,UAAWC,IAAQC,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMC,GAAG,aAAaH,UAAU,MAAhC,6B,wBCaSI,EAjBG,SAACC,GAEjB,OADAC,QAAQC,IAAIF,GAEV,qBAAIL,UAAWC,IAAQO,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMP,GAAE,kBAAeE,EAAMM,IAAMX,UAAU,MAA7C,iC,iBCwCSY,EArCG,SAACP,GAEjB,IAZkBQ,EAAQC,EAYpBC,EAAUC,cAEVC,EAAWC,cAEXC,EAAiD,QADnC,IAAIC,gBAAgBH,EAASI,QACVC,IAAI,QAErCC,GAlBYV,EAkBcR,EAAMQ,OAlBZC,EAkBoBK,EAjBvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAuBxC,OACE,eAAC,WAAD,WACE,qBAAKX,UAAWC,IAAQ0B,QAAxB,SACE,yBAAQC,QAZe,WAC3Bb,EAAQc,KAAK,CACXC,SAAUb,EAASa,SACnBT,OAAO,SAAD,OAAYF,EAAqB,OAAS,UAS9C,kBAA6CA,EAAqB,aAAe,iBAEnF,oBAAInB,UAAWC,IAAQ8B,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEtB,GAAIsB,EAAMtB,GACVD,OAAQuB,EAAMvB,OACdD,KAAMwB,EAAMxB,MAHPwB,EAAMtB,a,wBCnCjBuB,EAAe,CACjB,CAAEvB,GAAI,KAAMD,OAAQ,MAAOD,KAAM,kBACjC,CAAEE,GAAI,KAAMD,OAAQ,aAAcD,KAAM,4BAgC7B0B,UA7BG,WACd7B,QAAQC,IAAI2B,GACZ,MAAyDE,YAAQC,KAAc,GAAxEC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAAcC,EAAlC,EAA4BC,KAAoBC,EAAhD,EAAgDA,MAMhD,OALAC,qBAAU,WACNL,MACD,CAACA,IAGU,YAAXC,EAEK,qBAAKvC,UAAW,WAAhB,SACI,cAAC4C,EAAA,EAAD,MAITF,EACQ,mBAAG1C,UAAW,iBAAd,SAAgC0C,IAE7B,cAAXH,GAA2BC,GAAwC,IAAxBA,EAAaK,OAKvD,mCACG,cAAC,EAAD,CAAWhC,OAAU2B,MALjB,cAAC,EAAD","file":"static/js/5.f8565a85.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3_MNh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__UZJpe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__2ihAv\",\"sorting\":\"QuoteList_sorting__29L93\"};","import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to='/new-quote' className='btn'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { Link } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  console.log(props);\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to = {`/quotes/${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useHistory, useLocation, useRouteMatch } from 'react-router';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n\n  const history = useHistory();\n\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending)\n  const changeSortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n    });\n    // history.push(`${location.pathname}?sort=${(isSortingAscending ? 'desc' : 'asc')}`);\n\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>Sort {isSortingAscending ? 'Descending' : 'Ascending'}</button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { useEffect } from \"react\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\n\r\nconst DUMMY_QUOTES = [\r\n    { id: 'q1', author: 'Max', text: 'Learning React' },\r\n    { id: 'q2', author: 'Maximilian', text: 'Learning React is great' },\r\n];\r\n\r\nconst AllQuotes = () => {\r\n    console.log(DUMMY_QUOTES);\r\n    const {sendRequest, status, data: loadedQuotes, error} = useHttp(getAllQuotes, true);\r\n    useEffect(()=>{\r\n        sendRequest();\r\n    }, [sendRequest]);\r\n\r\n\r\n    if(status === 'pending'){\r\n        return(\r\n            <div className= 'centered'>\r\n                <LoadingSpinner/>\r\n            </div>\r\n        )\r\n    }\r\n    if(error){\r\n        return <p className= 'centered focus'>{error}</p>\r\n    }\r\n    if(status === 'completed' &&(!loadedQuotes || loadedQuotes.length === 0)){\r\n        return <NoQuotesFound />\r\n    }\r\n\r\n    return (\r\n        <>\r\n           <QuoteList quotes = {loadedQuotes }/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AllQuotes;"],"sourceRoot":""}